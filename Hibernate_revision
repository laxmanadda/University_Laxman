topics are:
1) session and session factory(different methods of session creation, getcurrentsession vs opensession()..)
2) session interface methods and when to use which one (below 3 links)
3) HQL vs Criteria Queries
4) Mapping
5) Caching
6) transient,persistant and detached states of an hibernate object. (https://what-when-how.com/hibernate/working-with-objects-hibernate/ (see the diagram by scrolling down))


https://www.journaldev.com/3481/hibernate-session-merge-vs-update-save-saveorupdate-persist-example (persist vs save && update vs merge)
https://www.journaldev.com/3472/hibernate-session-get-vs-load-difference-with-examples  (get vs load)
https://stackoverflow.com/questions/5862680/whats-the-advantage-of-persist-vs-save-in-hibernate (save vs persist)

unedrstanding written below
https://stackoverflow.com/questions/14581865/hibernate-commit-and-flush

Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

for ( int i=0; i<100000; i++ ) {
    Customer customer = new Customer(.....);
    session.save(customer);
    if ( i % 20 == 0 ) { //20, same as the JDBC batch size
        //flush a batch of inserts and release memory:
        session.flush();
        session.clear();
    }
}

tx.commit();
session.close();

flush is for synchronising in memory session data with the database, but it will not commit the changes--> after flushing if there are any error complete roll back will happen(because it's inside transaction). 
flush will synchronise and remove the data from session. Main purpose of flush is to reduce the burden on tx.commit() as it may give outOfBound Exception when handling more records.
commit = flush + committing. (but that flushing may give outOfBound exception that why we use flush explicitly)


criteria queries:
	1) regular save.update methods don't have filterations and restrictions, criteria queries provide them.
	2) no need to write raw sql statements, similar obj oriented(writing will be less which one will be fast?)
	3) Projections provide aggregate functions(avg,sum,min,max,...) and also extract only few columns from table.

only select is done with criteria, no update, delete, insert possible but HQL it's possible

I am not finding any reason to use criteria queries over HQL except that criteria queries are safe from SQL injections(almost everything which can be done with criteria queries can be done in HQL, without confusion :) 

Native SQL is for using adtabase related key words or advantages which are not available in hibernate.


Mapping:

OneByOne :  Here for every instructor InstructorDetail obj has to be created(because oneByOne)
understand all cascade types by testing, i think only delete cascading will be useful. 

global wrt serviceDomain,sbu,country_name,local_grade is kept null if not present.
when click on edit localgrade,globalgrade and projectDuration are visible but disabled
search not working -- working now

100505841
100558850


https://www.mkyong.com/spring/spring-loosely-coupled-example/

1) in the first case if the class name changes we have make everywhere where this class is used for obj creation
2) in spring thing we are creating obj with the help of bean id -- so if we have to change class name then we need to change only in xml
3) in case 2 we need separate helper classes for both implementations of interface()

https://stackoverflow.com/questions/9403155/what-is-dependency-injection-and-inversion-of-control-in-spring-framework

Inversion of control -- > giving control for framework to create objects instead of our application code to create
dependency injection is 1 way to achieve IOC (it's basically injecting objects)

@autowiring --> if you use this no need to use application context and stuff. direct bean creation.
context:component-scan --> if you mention this no need to write xml for creating beans. you can use directly by autowiring.it will create for all the class mentioned in the base-package attribute

difference between
1) controller vs RestController
2) @service vs @repository
3) https://www.codelooru.com/2010/10/what-does-mvcannotation-driven-do.html --> <mvc:annotation-driven>

https://www.greycampus.com/blog/programming/top-spring-interview-questions-and-answers
https://www.mkyong.com/spring/spring-dependency-injection-di/
https://www.mkyong.com/spring/spring-loosely-coupled-example/
https://stackoverflow.com/questions/9403155/what-is-dependency-injection-and-inversion-of-control-in-spring-framework
https://www.journaldev.com/2623/spring-autowired-annotation
https://springframework.guru/spring-framework-annotations/
https://javabeat.net/spring-mvc-component-scan-annotations/
https://stackoverflow.com/questions/7414794/difference-between-contextannotation-config-vs-contextcomponent-scan
https://www.tutorialspoint.com/spring/spring_bean_life_cycle.htm


https://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/jdbc.html
https://stackoverflow.com/questions/25948090/how-spring-security-add-configure-authenticationmanagerbuilder
https://www.journaldev.com/8748/spring-security-role-based-access-authorization-example

sarmahaj

method level authorization
sso authorization
LDAP
remember me(https://www.javatpoint.com/spring-security-remember-me)


httpsecurity methods --login,logout,cookies,remember me, session, authorization
password encoder
ssh into server/other system
try to hack so that you would the ways of finding loopholes in a website --> your website will be good


https://jobs.jpmorganchase.com/ShowJob/Id/234309/Java%20Software%20Engineer
https://jobs.jpmorganchase.com/ShowJob/Id/213236/Software%20Engineer%20%20%20Full%20Stack%20Java%20Application%20Developer
https://jobs.jpmorganchase.com/ShowJob/Id/238893/Java%20Software%20Engineer
https://scb.taleo.net/careersection/ex/jobdetail.ftl?job=1900010507&lang=en&HRS_SUBSOURCE_ID=1804
https://scb.taleo.net/careersection/ex/jobdetail.ftl?job=1900014243&lang=en&HRS_SUBSOURCE_ID=1804
https://scb.taleo.net/careersection/ex/jobdetail.ftl?job=1900007253&lang=en&HRS_SUBSOURCE_ID=1804
https://scb.taleo.net/careersection/ex/jobdetail.ftl?job=1900014062&lang=en&HRS_SUBSOURCE_ID=1804
https://jobs.jpmorganchase.com/ShowJob/Id/226144/Associate,%20Java%20Developer%20%20%20Core%20Portfolio%20Implementation
https://jobs.jpmorganchase.com/ShowJob/Id/238819/Software%20Engineer%20%20%20Java%20Developer%20%20%20Mumbai
https://jobs.jpmorganchase.com/ShowJob/Id/232767/Java%20Developer%20%20%20Asset%20Management
https://jobs.jpmorganchase.com/ShowJob/Id/228775/Java%20Developer
